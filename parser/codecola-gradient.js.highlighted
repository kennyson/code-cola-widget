<div class="highlight"><pre><span class="cm">/*</span>
<span class="cm">Copyright (c) 2011, ZHOUQICF.COM. All rights reserved.</span>
<span class="cm">Code licensed under the MIT License:</span>
<span class="cm">version: 1.0.0</span>
<span class="cm">*/</span>
<span class="cm">/**</span>
<span class="cm"> * a gradient control for css3 property</span>
<span class="cm"> * @module codecola-gradient</span>
<span class="cm"> */</span>
<span class="nx">YUI</span><span class="p">().</span><span class="nx">add</span><span class="p">(</span><span class="s1">&#39;codecola-gradient&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Y</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/**</span>
<span class="cm">     * a gradient control for css3 property</span>
<span class="cm">     * @param config {Object} Object literal specifying codecolaGradient configuration properties.</span>
<span class="cm">     * @class codecolaGradient</span>
<span class="cm">     * @constructor</span>
<span class="cm">     * @namespace Y</span>
<span class="cm">     * @extends Widget</span>
<span class="cm">     * @requires codecola-color node widget ua codecola-gradient-css</span>
<span class="cm">     */</span>
    <span class="nx">Y</span><span class="p">.</span><span class="nx">codecolaGradient</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Base</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;codecola-gradient&#39;</span><span class="p">,</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Widget</span><span class="p">,</span> <span class="p">[],</span> <span class="p">{</span>
        <span class="nx">initializer</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">},</span>

        <span class="nx">renderUI</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">random</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">).</span><span class="nx">getTime</span><span class="p">(),</span>
                <span class="nx">ids</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="nx">panel</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-panel-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">panelWrap</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-panel-wrap-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">stops</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-stops-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">color</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-color-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">location</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-location-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">button</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-stop-delete-button-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">orientation</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-orientation-&quot;</span> <span class="o">+</span> <span class="nx">random</span><span class="p">,</span>
                    <span class="nx">stopDetail</span><span class="o">:</span> <span class="s2">&quot;codecola-gradient-stop-detail-&quot;</span> <span class="o">+</span> <span class="nx">random</span>
                <span class="p">};</span>

            <span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="s1">&#39;&lt;div class=&quot;codecola-gradient-wrap&quot;&gt;&#39;</span><span class="o">+</span>
                        <span class="s1">&#39;   &lt;div class=&quot;codecola-gradient-panel-wrap&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">panelWrap</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span>
                        <span class="s1">&#39;       &lt;div class=&quot;codecola-gradient-panel&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">panel</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/div&gt;&#39;</span><span class="o">+</span>
                        <span class="s1">&#39;   &lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;   &lt;div class=&quot;codecola-gradient-stops&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">stops</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;   &lt;div class=&quot;codecola-gradient-orientation-wrap&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;       &lt;label class=&quot;codecola-gradient-label&quot; for=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;Orientation:&lt;/label&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;select class=&quot;codecola-gradient-orientation&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;option value=&quot;horizontal&quot;&gt;horizontal&lt;/option&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;option value=&quot;vertical&quot;&gt;vertical&lt;/option&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;/select&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;   &lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;   &lt;div class=&quot;codecola-gradient-stop-detail&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">stopDetail</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;div class=&quot;codecola-gradient-color-wrap&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;label class=&quot;codecola-gradient-label&quot;&gt;Color:&lt;/label&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;div class=&quot;codecola-gradient-color&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;&lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;div class=&quot;codecola-gradient-location-wrap&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;label for=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">location</span> <span class="o">+</span> <span class="s1">&#39;&quot; class=&quot;codecola-gradient-label&quot;&gt;Location:&lt;/label&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;input type=&quot;number&quot; class=&quot;codecola-gradient-location&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">location</span> <span class="o">+</span> <span class="s1">&#39;&quot; step=&quot;1&quot; min=&quot;0&quot; max=&quot;100&quot;&gt; %&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;div class=&quot;codecola-gradient-stop-delete&quot;&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;		    &lt;button class=&quot;codecola-gradient-stop-delete-button&quot; id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">ids</span><span class="p">.</span><span class="nx">button</span> <span class="o">+</span> <span class="s1">&#39;&quot;&gt;delete&lt;/button&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;	    &lt;/div&gt;&#39;</span> <span class="o">+</span>
                        <span class="s1">&#39;   &lt;/div&gt;&#39;</span><span class="o">+</span>
                        <span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">;</span>

            <span class="c1">//create nodes</span>
            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
            <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;wrap&#39;</span><span class="p">)).</span><span class="nx">append</span><span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">html</span><span class="p">));</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nx">panel</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">panel</span><span class="p">),</span>
                <span class="nx">panelWrap</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">panelWrap</span><span class="p">),</span>
                <span class="nx">stops</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">stops</span><span class="p">),</span>
                <span class="nx">color</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span>
                <span class="nx">location</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">location</span><span class="p">),</span>
                <span class="nx">button</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">button</span><span class="p">),</span>
                <span class="nx">orientation</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">orientation</span><span class="p">),</span>
                <span class="nx">stopDetail</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">stopDetail</span><span class="p">),</span>
                <span class="nx">id</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
                <span class="nx">colorControl</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
                <span class="nx">currentStop</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
                <span class="nx">disable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">rule</span><span class="o">:</span> <span class="p">{</span>
                    <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                    <span class="nx">orientation</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                    <span class="nx">stops</span><span class="o">:</span> <span class="p">[]</span>
                <span class="p">}</span>
            <span class="p">};</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">panelWrap</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;panelWidth&#39;</span><span class="p">));</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">stops</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;width&quot;</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;panelWidth&#39;</span><span class="p">));</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">codecolaColor</span><span class="p">({</span>
                <span class="nx">wrap</span><span class="o">:</span> <span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="nx">ids</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span>
                <span class="nx">onChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">color</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">cStop</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">currentStop</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cStop</span> <span class="o">||</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span><span class="p">;</span>
                    <span class="p">}</span>
                    <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">cStop</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)].</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">color</span><span class="p">;</span>
                    <span class="nx">cStop</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;backgroundColor&quot;</span><span class="p">,</span> <span class="nx">color</span><span class="p">);</span>
                    <span class="nx">that</span><span class="p">.</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
            <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="nx">bindUI</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
                <span class="nx">vars</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">,</span>
                <span class="nx">rule</span> <span class="o">=</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">;</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">orientation</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="p">});</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">stops</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;nodeName&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;I&quot;</span> <span class="o">||</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s2">&quot;color&quot;</span><span class="o">:</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">getColor</span><span class="p">(),</span>
                    <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_getFloatLeft</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span> <span class="o">-</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">panel</span><span class="p">.</span><span class="nx">getX</span><span class="p">()</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span>
                <span class="p">};</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_addStops</span><span class="p">([</span><span class="nx">s</span><span class="p">]).</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="p">});</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">cStop</span> <span class="o">=</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">currentStop</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cStop</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kd">var</span> <span class="nx">left</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">);</span>
                <span class="nx">left</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_percentToFloat</span><span class="p">(</span><span class="nx">left</span> <span class="o">+</span> <span class="s2">&quot;%&quot;</span><span class="p">);</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">cStop</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)].</span><span class="nx">position</span> <span class="o">=</span> <span class="nx">left</span><span class="p">;</span>
                <span class="nx">cStop</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_getPixLeft</span><span class="p">(</span><span class="nx">left</span><span class="p">));</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="p">});</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">cStop</span> <span class="o">=</span> <span class="nx">vars</span><span class="p">.</span><span class="nx">currentStop</span><span class="p">;</span>
                <span class="c1">//that.vars.stops.getElementsByTagName(&quot;i&quot;).length &lt;= 2</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cStop</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">delete</span> <span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">cStop</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)];</span>
                <span class="nx">vars</span><span class="p">.</span><span class="nx">stops</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">cStop</span><span class="p">);</span>
                <span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">disable</span><span class="p">();</span>
                <span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="nx">vars</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="p">});</span>

            <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="nx">syncUI</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_initRule</span><span class="p">().</span><span class="nx">_initControls</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="nx">renderer</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">renderUI</span><span class="p">().</span><span class="nx">bindUI</span><span class="p">().</span><span class="nx">syncUI</span><span class="p">().</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;onInit&#39;</span><span class="p">)();</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * update the this.vars.rule object</span>
<span class="cm">         * @method _initRule</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initRule</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="kd">var</span>
            <span class="nx">rule</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">,</span>
            <span class="nx">stops</span> <span class="o">=</span> <span class="p">[],</span>
            <span class="nx">gradient</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;gradient&#39;</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="sr">/-webkit-gradient/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">gradient</span><span class="p">))</span> <span class="p">{</span>
                <span class="nx">gradient</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*,\s*/g</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;-webkit-gradient(&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="sr">/,(?=[fct])/</span><span class="p">);</span>
                <span class="kd">var</span> <span class="nx">part1</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="nx">part1</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">=</span> <span class="nx">part1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">part1</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">=</span> <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">==</span> <span class="s2">&quot;0% 0%,100% 0%&quot;</span> <span class="o">?</span> <span class="s2">&quot;horizontal&quot;</span> <span class="o">:</span> <span class="s2">&quot;vertical&quot;</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                    <span class="k">if</span> <span class="p">(</span><span class="sr">/color/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">c</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;color-stop(&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="sr">/,(?=r)/</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="sr">/from/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nx">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/from\(|/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)];</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nx">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/to\(/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)];</span>
                    <span class="p">}</span>
                    <span class="nx">stops</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
                        <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                        <span class="s2">&quot;color&quot;</span><span class="o">:</span> <span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">gradient</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*,\s*/g</span><span class="p">,</span> <span class="s2">&quot;,&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/-(moz|o|ms|webkit)-linear-gradient\(/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\)$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="sr">/,(?=[r#])/</span><span class="p">);</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;linear&quot;</span><span class="p">;</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">=</span> <span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">==</span> <span class="s2">&quot;left&quot;</span> <span class="o">?</span> <span class="s2">&quot;horizontal&quot;</span> <span class="o">:</span> <span class="s2">&quot;vertical&quot;</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">gradient</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
                    <span class="nx">stops</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
                        <span class="s2">&quot;position&quot;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_percentToFloat</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
                        <span class="s2">&quot;color&quot;</span><span class="o">:</span> <span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                    <span class="p">});</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span> <span class="o">=</span> <span class="nx">stops</span><span class="p">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
            <span class="c1">//this._addStops(stops);</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * @method _initOrientation</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initOrientation</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">orientation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * @method _initPanel</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initPanel</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">panel</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;backgroundImage&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">getGradient</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="cm">/**</span>
<span class="cm">         * @method _initStops</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initStops</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">stops</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_addStops</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">);</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * init all controls</span>
<span class="cm">         * @method _initControls</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initControls</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_initStops</span><span class="p">().</span><span class="nx">_initOrientation</span><span class="p">().</span><span class="nx">_initPanel</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * update the attribute &#39;gradient&#39;, init all the controls, fire the onChange event</span>
<span class="cm">         * @method setGradient</span>
<span class="cm">         * @param {Object} param.gradient for update the attribute &#39;gradient&#39;</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">setGradient</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">param</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;gradient&#39;</span><span class="p">,</span> <span class="nx">param</span><span class="p">.</span><span class="nx">gradient</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">syncUI</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * add stops</span>
<span class="cm">         * @method _addStops</span>
<span class="cm">         * @param {Array}</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_addStops</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stops</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span> <span class="nx">i</span><span class="p">;</span>
            <span class="nx">Y</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">stops</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
                    <span class="nx">p</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_getPixLeft</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span>

                <span class="nx">i</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Node</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s1">&#39;&lt;i class=&quot;codecola-gradient-stop&quot; index=&quot;&#39;</span><span class="o">+</span><span class="nx">id</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&lt;/i&gt;&#39;</span><span class="p">);</span>
                <span class="nx">i</span><span class="p">.</span><span class="nx">setStyles</span><span class="p">({</span>
                    <span class="nx">left</span><span class="o">:</span> <span class="nx">p</span><span class="p">,</span>
                    <span class="nx">backgroundColor</span><span class="o">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">color</span>
                <span class="p">});</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">stops</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_initStopEvent</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">id</span><span class="p">);</span>

                <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="o">=</span> <span class="nx">s</span><span class="p">;</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">id</span><span class="o">++</span><span class="p">;</span>
            <span class="p">});</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">_changeCurrentStop</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * bind event to the stop</span>
<span class="cm">         * @method _initStopEvent</span>
<span class="cm">         * @param {Node} stop</span>
<span class="cm">         * @param {Number} id</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_initStopEvent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stop</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">preX</span><span class="p">,</span> <span class="nx">preEventX</span><span class="p">,</span> <span class="nx">drag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
                <span class="nx">doc</span> <span class="o">=</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;html&#39;</span><span class="p">),</span>
                <span class="nx">panelWidth</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;panelWidth&#39;</span><span class="p">);</span>
            <span class="nx">stop</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mousedown&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nx">doc</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;webkitUserSelect&quot;</span><span class="p">,</span> <span class="s2">&quot;none&quot;</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_changeCurrentStop</span><span class="p">(</span><span class="nx">stop</span><span class="p">);</span>
                <span class="nx">drag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
                <span class="nx">preX</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_getPixLeft</span><span class="p">(</span><span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">position</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
                <span class="nx">preEventX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="p">;</span>
            <span class="p">});</span>
            <span class="nx">doc</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mouseup&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">drag</span> <span class="o">||</span> <span class="o">!</span><span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">doc</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;webkitUserSelect&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
                    <span class="nx">drag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">});</span>
            <span class="nx">doc</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;mousemove&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">drag</span> <span class="o">||</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kd">var</span> <span class="nx">left</span> <span class="o">=</span> <span class="nx">preX</span> <span class="o">+</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">preEventX</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">left</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">5</span> <span class="o">||</span> <span class="nx">left</span> <span class="o">&gt;</span> <span class="nx">panelWidth</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nx">stop</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="s2">&quot;left&quot;</span><span class="p">,</span> <span class="nx">left</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">);</span>
                <span class="kd">var</span> <span class="nx">floatLeft</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_getFloatLeft</span><span class="p">(</span><span class="nx">left</span><span class="p">);</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">position</span> <span class="o">=</span> <span class="nx">floatLeft</span><span class="p">;</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_floatToPercent</span><span class="p">(</span><span class="nx">floatLeft</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
                <span class="nx">that</span><span class="p">.</span><span class="nx">_initPanel</span><span class="p">().</span><span class="nx">_fireCallback</span><span class="p">();</span>
            <span class="p">});</span>
            <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * activate a stop</span>
<span class="cm">         * @method _changeCurrentStop</span>
<span class="cm">         * @param {Node}</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_changeCurrentStop</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stop</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
                <span class="nx">preStop</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">currentStop</span><span class="p">,</span>
                <span class="nx">selectClassName</span> <span class="o">=</span> <span class="s2">&quot;codecola-gradient-stop-select&quot;</span><span class="p">,</span>
                <span class="nx">cStop</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">[</span><span class="nx">stop</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="p">)];</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">preStop</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">preStop</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="nx">selectClassName</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">stop</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">selectClassName</span><span class="p">);</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">currentStop</span> <span class="o">=</span> <span class="nx">stop</span><span class="p">;</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">able</span><span class="p">();</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="nx">cStop</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span>
            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">syncUI</span><span class="p">();</span>

            <span class="nx">that</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="nx">that</span><span class="p">.</span><span class="nx">_floatToPercent</span><span class="p">(</span><span class="nx">cStop</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>
            <span class="k">return</span> <span class="nx">that</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * get the current gradient</span>
<span class="cm">         * @method getGradient</span>
<span class="cm">         * @param {Boolean} isAll if return all of webkit|moz|o|ms gradient &lt;code&gt;{webkit:xxx, moz:xxx, o:xxx, ms:xxx}&lt;/code&gt;</span>
<span class="cm">         * @param {Boolean} isPanel if for update panel</span>
<span class="cm">         * @return {String|Object}</span>
<span class="cm">         */</span>
        <span class="nx">getGradient</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">isAll</span><span class="p">,</span> <span class="nx">isPanel</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">rule</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">.</span><span class="nx">rule</span><span class="p">,</span>
                <span class="nx">tempStops</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">rule</span><span class="p">.</span><span class="nx">stops</span><span class="p">),</span>
                <span class="nx">stops</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="nx">webkit</span><span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
                    <span class="nx">moz</span><span class="o">:</span> <span class="s2">&quot;&quot;</span>
                <span class="p">},</span>
                <span class="nx">webkit</span><span class="p">,</span> <span class="nx">moz</span><span class="p">,</span> <span class="nx">o</span><span class="p">,</span> <span class="nx">ms</span><span class="p">,</span>
                <span class="nx">orientation</span> <span class="o">=</span> <span class="p">{};</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">rule</span><span class="p">.</span><span class="nx">orientation</span> <span class="o">==</span> <span class="s2">&quot;horizontal&quot;</span> <span class="o">||</span> <span class="nx">isPanel</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">orientation</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s2">&quot;webkit&quot;</span><span class="o">:</span> <span class="s2">&quot;0% 0%,100% 0%&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;moz&quot;</span><span class="o">:</span> <span class="s2">&quot;left&quot;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">orientation</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s2">&quot;webkit&quot;</span><span class="o">:</span> <span class="s2">&quot;0% 0%,0% 100%&quot;</span><span class="p">,</span>
                    <span class="s2">&quot;moz&quot;</span><span class="o">:</span> <span class="s2">&quot;top&quot;</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="nx">tempStops</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">position</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span>
            <span class="p">});</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">j</span> <span class="o">=</span> <span class="nx">tempStops</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">j</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">cStop</span> <span class="o">=</span> <span class="nx">tempStops</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">cStop</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="nx">cStop</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span>
                        <span class="nx">c</span> <span class="o">=</span> <span class="nx">cStop</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">p</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">stops</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">+=</span> <span class="s2">&quot;,from(&quot;</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">p</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">stops</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">+=</span> <span class="s2">&quot;,to(&quot;</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">stops</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">+=</span> <span class="s2">&quot;,color-stop(&quot;</span> <span class="o">+</span> <span class="nx">p</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nx">stops</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+=</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_floatToPercent</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">webkit</span> <span class="o">=</span> <span class="s2">&quot;-webkit-gradient(&quot;</span> <span class="o">+</span> <span class="nx">rule</span><span class="p">.</span><span class="nx">type</span> <span class="o">+</span> <span class="s2">&quot;,&quot;</span> <span class="o">+</span> <span class="nx">orientation</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">+</span> <span class="nx">stops</span><span class="p">.</span><span class="nx">webkit</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
            <span class="nx">moz</span> <span class="o">=</span> <span class="s2">&quot;-moz-linear-gradient(&quot;</span> <span class="o">+</span> <span class="nx">orientation</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="nx">stops</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
            <span class="nx">o</span> <span class="o">=</span> <span class="s2">&quot;-o-linear-gradient(&quot;</span> <span class="o">+</span> <span class="nx">orientation</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="nx">stops</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
            <span class="nx">ms</span> <span class="o">=</span> <span class="s2">&quot;-ms-linear-gradient(&quot;</span> <span class="o">+</span> <span class="nx">orientation</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="nx">stops</span><span class="p">.</span><span class="nx">moz</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isAll</span><span class="p">){</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="s2">&quot;webkit&quot;</span><span class="o">:</span> <span class="nx">webkit</span><span class="p">,</span>
                    <span class="s2">&quot;moz&quot;</span><span class="o">:</span> <span class="nx">moz</span><span class="p">,</span>
                    <span class="s2">&quot;o&quot;</span><span class="o">:</span> <span class="nx">o</span><span class="p">,</span>
                    <span class="s2">&quot;ms&quot;</span><span class="o">:</span> <span class="nx">ms</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">UA</span><span class="p">.</span><span class="nx">webkit</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">webkit</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">UA</span><span class="p">.</span><span class="nx">gecko</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">moz</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">UA</span><span class="p">.</span><span class="nx">opera</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">o</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">Y</span><span class="p">.</span><span class="nx">UA</span><span class="p">.</span><span class="nx">ie</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">ms</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * @method _getFloatLeft</span>
<span class="cm">         * @param {Number}</span>
<span class="cm">         * @private</span>
<span class="cm">         * @return {Number}</span>
<span class="cm">         */</span>
        <span class="nx">_getFloatLeft</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">leftPix</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">floatLeft</span> <span class="o">=</span> <span class="p">((</span><span class="nx">leftPix</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">/</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;panelWidth&#39;</span><span class="p">)).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">floatLeft</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">floatLeft</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">floatLeft</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * @method _getPixLeft</span>
<span class="cm">         * @param {Number} leftFloat</span>
<span class="cm">         * @param {Boolean} isNum if return width &#39;px&#39;</span>
<span class="cm">         * @private</span>
<span class="cm">         * @return {Number|String}</span>
<span class="cm">         */</span>
        <span class="nx">_getPixLeft</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">leftFloat</span><span class="p">,</span> <span class="nx">isNum</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">panelWidth</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;panelWidth&#39;</span><span class="p">),</span>
                <span class="nx">pixLeft</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">leftFloat</span> <span class="o">*</span> <span class="nx">panelWidth</span><span class="p">)</span> <span class="o">-</span> <span class="mi">5</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">pixLeft</span> <span class="o">&gt;</span> <span class="nx">panelWidth</span> <span class="o">-</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">pixLeft</span> <span class="o">=</span> <span class="nx">panelWidth</span> <span class="o">-</span> <span class="mi">5</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">pixLeft</span> <span class="o">&lt;</span> <span class="o">-</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">pixLeft</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isNum</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">pixLeft</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">pixLeft</span> <span class="o">+</span> <span class="s2">&quot;px&quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * transform percent number to float</span>
<span class="cm">         * @method _percentToFloat</span>
<span class="cm">         * @param {String}</span>
<span class="cm">         * @private</span>
<span class="cm">         * @return {Number}</span>
<span class="cm">         */</span>
        <span class="nx">_percentToFloat</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">percent</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">percent</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;%&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">),</span> <span class="mi">10</span><span class="p">)</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * transform float number to percent</span>
<span class="cm">         * @method _floatToPercent</span>
<span class="cm">         * @param {Number} float</span>
<span class="cm">         * @param {Boolean} isNum if return width &#39;%&#39;</span>
<span class="cm">         * @private</span>
<span class="cm">         * @return {String}</span>
<span class="cm">         */</span>
        <span class="nx">_floatToPercent</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="kr">float</span><span class="p">,</span> <span class="nx">isNum</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">percent</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="kr">float</span> <span class="o">*</span> <span class="mi">100</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">isNum</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">percent</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nx">percent</span> <span class="o">+</span> <span class="s2">&quot;%&quot;</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * fire the onChange event</span>
<span class="cm">         * @method _fireCallback</span>
<span class="cm">         * @private</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">_fireCallback</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;onChange&#39;</span><span class="p">)(</span><span class="k">this</span><span class="p">.</span><span class="nx">getGradient</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isAll&#39;</span><span class="p">)));</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * disable all controls</span>
<span class="cm">         * @method disable</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">disable</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">vars</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">;</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">disable</span><span class="p">();</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">orientation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">},</span>

        <span class="cm">/**</span>
<span class="cm">         * able all controls</span>
<span class="cm">         * @method able</span>
<span class="cm">         * @chainable</span>
<span class="cm">         */</span>
        <span class="nx">able</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">vars</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">vars</span><span class="p">;</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">colorControl</span><span class="p">.</span><span class="nx">able</span><span class="p">();</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">orientation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">button</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
            <span class="nx">vars</span><span class="p">.</span><span class="nx">disable</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">},</span> <span class="p">{</span>
        <span class="nx">ATTRS</span><span class="o">:</span><span class="p">{</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute wrap</span>
<span class="cm">             * @type String</span>
<span class="cm">             * @default &#39;body&#39;</span>
<span class="cm">             * @description a css selector for &lt;code&gt;Y.one()&lt;/code&gt;,controls will insert into the wrap</span>
<span class="cm">             */</span>
            <span class="nx">wrap</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span>
                <span class="nx">validator</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="p">.</span><span class="nx">isString</span>
            <span class="p">},</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute gradient</span>
<span class="cm">             * @type String</span>
<span class="cm">             * @default &quot;-webkit-gradient(linear, 0% 0%, 100% 0%, from(#000), to(#fff))&quot; or &quot;-moz-linear-gradient(left , #000 0%, #fff 100%)&quot; or &quot;-o-linear-gradient(left , #000 0%, #fff 100%)&quot; or &quot;-ms-linear-gradient(left , #000 0%, #fff 100%)&quot;</span>
<span class="cm">             * @description gradient for init</span>
<span class="cm">             */</span>
            <span class="nx">gradient</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;-o-linear-gradient(left , #000 0%, #fff 100%)&quot;</span><span class="p">,</span>
                <span class="nx">setter</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span>
                    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">v</span><span class="p">){</span>
                        <span class="k">return</span> <span class="s2">&quot;-o-linear-gradient(left , #000 0%, #fff 100%)&quot;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute panelWidth</span>
<span class="cm">             * @type Number</span>
<span class="cm">             * @default 200</span>
<span class="cm">             * @description the control&#39;s width</span>
<span class="cm">             */</span>
            <span class="nx">panelWidth</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="mi">200</span><span class="p">,</span>
                <span class="nx">validator</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="p">.</span><span class="nx">isNumber</span>
            <span class="p">},</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute isAll</span>
<span class="cm">             * @type Boolean</span>
<span class="cm">             * @default false</span>
<span class="cm">             * @description if the param include all private property when run the callback</span>
<span class="cm">             */</span>
            <span class="nx">isAll</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">validator</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="p">.</span><span class="nx">isBoolean</span>
            <span class="p">},</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute onInit</span>
<span class="cm">             * @type Function</span>
<span class="cm">             * @default function(){}</span>
<span class="cm">             * @description callback when widget init</span>
<span class="cm">             */</span>
            <span class="nx">onInit</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="p">},</span>
                <span class="nx">validator</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="p">.</span><span class="nx">isFunction</span>
            <span class="p">},</span>
            <span class="cm">/**</span>
<span class="cm">             * @attribute onChange</span>
<span class="cm">             * @type Function</span>
<span class="cm">             * @default function(){}</span>
<span class="cm">             * @description callback when gradient change</span>
<span class="cm">             */</span>
            <span class="nx">onChange</span><span class="o">:</span> <span class="p">{</span>
                <span class="nx">value</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="p">},</span>
                <span class="nx">validator</span><span class="o">:</span> <span class="nx">Y</span><span class="p">.</span><span class="nx">Lang</span><span class="p">.</span><span class="nx">isFunction</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">},</span> <span class="s1">&#39;1.0.0&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">requires</span><span class="o">:</span><span class="p">[</span><span class="s1">&#39;codecola-color&#39;</span><span class="p">,</span> <span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="s1">&#39;widget-base&#39;</span><span class="p">,</span> <span class="s1">&#39;ua&#39;</span><span class="p">,</span> <span class="s1">&#39;codecola-gradient-css&#39;</span><span class="p">]});</span>
</pre></div>
