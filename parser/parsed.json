{"majorversion": 3, "filemap": {"codecola-gradient.js": {"classlist": ["Y.codecolaGradient"], "name": "codecola-gradient.js", "module": "codecola-degree"}, "codecola-color.js": {"classlist": ["Y.codecolaColor"], "name": "codecola-color.js", "module": "codecola-color"}, "codecola-degree.js": {"classlist": ["Y.codecolaDegree"], "name": "codecola-degree.js", "module": "codecola-color"}}, "modules": {"codecola-gradient": {"description": "a gradient control for css3 property", "submodules": [], "classlist": ["Y.codecolaGradient"], "filelist": [], "subdata": {}, "name": "codecola-gradient"}, "codecola-color": {"description": "a color control for css3 property", "submodules": [], "classlist": ["Y.codecolaColor"], "filelist": ["codecola-color.js", "codecola-degree.js"], "subdata": {}, "name": "codecola-color"}, "codecola-degree": {"description": "a degree control for css3 property", "submodules": [], "classlist": ["Y.codecolaDegree"], "filelist": ["codecola-gradient.js"], "subdata": {}, "name": "codecola-degree"}}, "classmap": {"Y.codecolaDegree": {"name": "Y.codecolaDegree", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying codecolaDegree configuration properties."}], "description": "a degree control for css3 property"}], "namespace": "Y", "module": "codecola-degree", "events": {"degreeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "degreeChange", "description": "Fires when the value for the configuration attribute 'degree' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onInitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onInitChange", "description": "Fires when the value for the configuration attribute 'onInit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onChangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onChangeChange", "description": "Fires when the value for the configuration attribute 'onChange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "codecolaDegree", "methods": {"reset": {"chainable": "", "description": "reset all, degree is 0, will not run onChange", "guessedname": "reset", "guessedtype": "function"}, "getDegree": {"return": {"type": "Number", "description": ""}, "description": "return the current degree", "guessedname": "getDegree", "guessedtype": "function"}, "_calculateDegree": {"return": {"type": "Number", "description": ""}, "description": "Calculate degree", "private": "", "params": [], "guessedname": "_calculateDegree", "guessedtype": "function"}, "_fireCallback": {"guessedname": "_fireCallback", "chainable": "", "description": "fire the onChange event", "private": "", "guessedtype": "function"}, "able": {"chainable": "", "description": "able all controls", "guessedname": "able", "guessedtype": "function"}, "_initControls": {"guessedname": "_initControls", "chainable": "", "description": "init all controls", "private": "", "guessedtype": "function"}, "disable": {"chainable": "", "description": "disable all controls", "guessedname": "disable", "guessedtype": "function"}, "setDegree": {"chainable": "", "params": [{"type": "Object", "name": "param.degree", "description": " for update the attribute 'degree'"}], "description": "update the attribute 'degree', init all the controls, fire the onChange event", "guessedname": "setDegree", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "codecola-degree.js", "guessedtype": "property", "shortname": "codecolaDegree", "requires": "node widget codecola-degree-css", "configs": {"wrap": {"default": "'body'", "type": "String", "description": "a css selector for <code>Y.one()</code>,controls will insert into the wrap", "guessedname": "wrap", "guessedtype": "property"}, "onChange": {"default": "function(){}", "type": "Function", "description": "callback when degree change", "guessedname": "onChange", "guessedtype": "property"}, "onInit": {"default": "function(){}", "type": "Function", "description": "callback when widget init", "guessedname": "onInit", "guessedtype": "property"}, "degree": {"default": "0", "type": "Number", "description": "degree for init, degree is a number from -180 to 180", "guessedname": "degree", "guessedtype": "property"}}, "description": "a degree control for css3 property"}, "Y.codecolaGradient": {"name": "Y.codecolaGradient", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying codecolaGradient configuration properties."}], "description": "a gradient control for css3 property"}], "namespace": "Y", "module": "codecola-gradient", "events": {"wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onChangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onChangeChange", "description": "Fires when the value for the configuration attribute 'onChange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onInitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onInitChange", "description": "Fires when the value for the configuration attribute 'onInit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "gradientChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "gradientChange", "description": "Fires when the value for the configuration attribute 'gradient' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "panelWidthChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "panelWidthChange", "description": "Fires when the value for the configuration attribute 'panelWidth' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "isAllChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isAllChange", "description": "Fires when the value for the configuration attribute 'isAll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "codecolaGradient", "methods": {"_fireCallback": {"guessedname": "_fireCallback", "chainable": "", "description": "fire the onChange event", "private": "", "guessedtype": "function"}, "_initPanel": {"chainable": "", "private": "", "guessedname": "_initPanel", "guessedtype": "function"}, "getGradient": {"return": {"type": "String|Object", "description": ""}, "params": [{"type": "Boolean} isAll if return all of webkit|moz|o|ms gradient <code>{webkit:xxx, moz:xxx, o:xxx, ms:xxx", "name": "</code>", "description": ""}, {"type": "Boolean", "name": "isPanel", "description": " if for update panel"}], "description": "get the current gradient", "guessedname": "getGradient", "guessedtype": "function"}, "_initStops": {"chainable": "", "private": "", "guessedname": "_initStops", "guessedtype": "function"}, "setGradient": {"chainable": "", "params": [{"type": "Object", "name": "param.gradient", "description": " for update the attribute 'gradient'"}], "description": "update the attribute 'gradient', init all the controls, fire the onChange event", "guessedname": "setGradient", "guessedtype": "function"}, "able": {"chainable": "", "description": "able all controls", "guessedname": "able", "guessedtype": "function"}, "_addStops": {"description": "add stops", "chainable": "", "private": "", "params": [], "guessedname": "_addStops", "guessedtype": "function"}, "_initControls": {"guessedname": "_initControls", "chainable": "", "description": "init all controls", "private": "", "guessedtype": "function"}, "disable": {"chainable": "", "description": "disable all controls", "guessedname": "disable", "guessedtype": "function"}, "_changeCurrentStop": {"description": "activate a stop", "chainable": "", "private": "", "params": [], "guessedname": "_changeCurrentStop", "guessedtype": "function"}, "_initOrientation": {"chainable": "", "private": "", "guessedname": "_initOrientation", "guessedtype": "function"}, "_percentToFloat": {"return": {"type": "Number", "description": ""}, "description": "transform percent number to float", "private": "", "params": [], "guessedname": "_percentToFloat", "guessedtype": "function"}, "_floatToPercent": {"return": {"type": "String", "description": ""}, "description": "transform float number to percent", "private": "", "params": [{"type": "Number", "name": "float", "description": ""}, {"type": "Boolean", "name": "isNum", "description": " if return width '%'"}], "guessedname": "_floatToPercent", "guessedtype": "function"}, "_getPixLeft": {"return": {"type": "Number|String", "description": ""}, "params": [{"type": "Number", "name": "leftFloat", "description": ""}, {"type": "Boolean", "name": "isNum", "description": " if return width 'px'"}], "guessedname": "_getPixLeft", "private": "", "guessedtype": "function"}, "_getFloatLeft": {"return": {"type": "Number", "description": ""}, "params": [], "guessedname": "_getFloatLeft", "private": "", "guessedtype": "function"}, "_initRule": {"guessedname": "_initRule", "chainable": "", "description": "update the this.vars.rule object", "private": "", "guessedtype": "function"}, "_initStopEvent": {"description": "bind event to the stop", "chainable": "", "private": "", "params": [{"type": "Node", "name": "stop", "description": ""}, {"type": "Number", "name": "id", "description": ""}], "guessedname": "_initStopEvent", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "codecola-gradient.js", "guessedtype": "property", "shortname": "codecolaGradient", "requires": "codecola-color node widget ua codecola-gradient-css", "configs": {"onChange": {"default": "function(){}", "type": "Function", "description": "callback when gradient change", "guessedname": "onChange", "guessedtype": "property"}, "gradient": {"default": "\"-webkit-gradient(linear, 0% 0%, 100% 0%, from(#000), to(#fff))\" or \"-moz-linear-gradient(left , #000 0%, #fff 100%)\" or \"-o-linear-gradient(left , #000 0%, #fff 100%)\" or \"-ms-linear-gradient(left , #000 0%, #fff 100%)\"", "type": "String", "description": "gradient for init", "guessedname": "gradient", "guessedtype": "property"}, "panelWidth": {"default": "200", "type": "Number", "description": "the control's width", "guessedname": "panelWidth", "guessedtype": "property"}, "wrap": {"default": "'body'", "type": "String", "description": "a css selector for <code>Y.one()</code>,controls will insert into the wrap", "guessedname": "wrap", "guessedtype": "property"}, "onInit": {"default": "function(){}", "type": "Function", "description": "callback when widget init", "guessedname": "onInit", "guessedtype": "property"}, "isAll": {"default": "false", "type": "Boolean", "description": "if the param include all private property when run the callback", "guessedname": "isAll", "guessedtype": "property"}}, "description": "a gradient control for css3 property"}, "Y.codecolaColor": {"name": "Y.codecolaColor", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal specifying codecolaColor configuration properties."}], "description": "a color control for css3 property"}], "namespace": "Y", "module": "codecola-color", "events": {"keywordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "keywordsChange", "description": "Fires when the value for the configuration attribute 'keywords' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "isSupportRGBAChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isSupportRGBAChange", "description": "Fires when the value for the configuration attribute 'isSupportRGBA' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onInitChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onInitChange", "description": "Fires when the value for the configuration attribute 'onInit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "onChangeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "onChangeChange", "description": "Fires when the value for the configuration attribute 'onChange' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "wrapChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "wrapChange", "description": "Fires when the value for the configuration attribute 'wrap' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "colorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "colorChange", "description": "Fires when the value for the configuration attribute 'color' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "isAllChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "isAllChange", "description": "Fires when the value for the configuration attribute 'isAll' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "codecolaColor", "methods": {"isHEX": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "if the color is hex", "guessedname": "isHEX", "guessedtype": "function"}, "hsbToRgba": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String|Object", "name": "support", "description": " hsb and hsba color"}], "description": "transform hsb or hsba to rgba", "guessedname": "hsbToRgba", "guessedtype": "function"}, "rgbToHsba": {"return": {"type": "Object", "description": ""}, "params": [{"type": "String|Object", "name": "support", "description": " rgb or rgba"}], "description": "transform rgb or rgba to hsba", "guessedname": "rgbToHsba", "guessedtype": "function"}, "getColorType": {"return": {"type": "String", "description": "hsba|hex|rgba, or return 'error'"}, "params": [], "description": "get the color's type, rgb is return rgba too", "guessedname": "getColorType", "guessedtype": "function"}, "_initRangeS": {"chainable": "", "private": "", "guessedname": "_initRangeS", "guessedtype": "function"}, "_initCurrentS": {"chainable": "", "private": "", "guessedname": "_initCurrentS", "guessedtype": "function"}, "_fireCallback": {"guessedname": "_fireCallback", "chainable": "", "description": "fire the onChange event", "private": "", "guessedtype": "function"}, "able": {"chainable": "", "description": "show color picker, able text input", "guessedname": "able", "guessedtype": "function"}, "_initCurrentH": {"chainable": "", "private": "", "guessedname": "_initCurrentH", "guessedtype": "function"}, "_initControls": {"guessedname": "_initControls", "chainable": "", "description": "init all controls", "private": "", "guessedtype": "function"}, "_initRangeH": {"chainable": "", "private": "", "guessedname": "_initRangeH", "guessedtype": "function"}, "rgbToHex": {"return": {"type": "String", "description": ""}, "params": [{"type": "Object", "name": "support", "description": " rgb or rgba"}], "description": "transform rgb or rgba to hex", "guessedname": "rgbToHex", "guessedtype": "function"}, "_initCurrentA": {"chainable": "", "private": "", "guessedname": "_initCurrentA", "guessedtype": "function"}, "_initRangeB": {"chainable": "", "private": "", "guessedname": "_initRangeB", "guessedtype": "function"}, "_initRangeA": {"chainable": "", "private": "", "guessedname": "_initRangeA", "guessedtype": "function"}, "_initCurrentB": {"chainable": "", "private": "", "guessedname": "_initCurrentB", "guessedtype": "function"}, "isHSBA": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "if the color is hsba", "guessedname": "isHSBA", "guessedtype": "function"}, "getColor": {"return": {"type": "String|Object", "description": ""}, "params": [], "description": "return the current rgba or rgb color\nreturn {String} rgba when the broswer is support rgba, if not return {String} rgb, return {Object} <code>{rgba:xxx, rgb:xxx}</code> when param 'isAll' is <code>ture</code>", "guessedname": "getColor", "guessedtype": "function"}, "isRGB": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "if the color is hsb", "guessedname": "isRGB", "guessedtype": "function"}, "changeColor": {"return": {"type": "String|Object", "description": "return Object when rgb|rgba|hsb|hsba, return String when hex"}, "params": [{"type": "String|Object", "name": "color", "description": ""}, {"type": "String", "name": "nType", "description": "  hex|rgb|rgba|hsb|hsba"}, {"type": "String", "name": "oType", "description": "  hex|rgb|rgba|hsb|hsba"}], "description": "change the color type from nType to oType", "guessedname": "changeColor", "guessedtype": "function"}, "disable": {"chainable": "", "description": "hide color picker, disable text input", "guessedname": "disable", "guessedtype": "function"}, "isRGBA": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "if the color is rgba", "guessedname": "isRGBA", "guessedtype": "function"}, "_initRule": {"guessedname": "_initRule", "chainable": "", "description": "update the this.vars.rule object", "private": "", "guessedtype": "function"}, "reset": {"chainable": "", "description": "reset all, color is 'transparent', will not run onChange", "guessedname": "reset", "guessedtype": "function"}, "setColor": {"chainable": "", "params": [{"type": "Object", "name": "param.color", "description": " for update the attribute 'color'"}], "description": "update the attribute 'color', init all the controls, fire the onChange event", "guessedname": "setColor", "guessedtype": "function"}, "_initInput": {"chainable": "", "private": "", "guessedname": "_initInput", "guessedtype": "function"}, "isHSB": {"return": {"type": "Boolean", "description": ""}, "params": [], "description": "if the color is hsb", "guessedname": "isHSB", "guessedtype": "function"}, "hexToComplate": {"return": {"type": "String", "description": ""}, "params": [], "description": "transform hex color <code>#fff</code> to <code>#ffffff</code>", "guessedname": "hexToComplate", "guessedtype": "function"}, "hexToRgba": {"return": {"type": "Object", "description": ""}, "params": [], "description": "transform hex to rgba", "guessedname": "hexToRgba", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "codecola-color.js", "guessedtype": "property", "shortname": "codecolaColor", "requires": "node widget codecola-color-css", "configs": {"onChange": {"default": "function(){}", "type": "Function", "description": "callback when color change", "guessedname": "onChange", "guessedtype": "property"}, "color": {"default": "'transparent'", "type": "String", "description": "color for init, support rgba|rgb|hsb|hsba|hex|<a href=\"http://www.w3.org/TR/css3-color/#svg-color\">keywords</a>|\"transparent\"", "guessedname": "color", "guessedtype": "property"}, "isSupportRGBA": {"type": "Boolean", "description": "if the current broswer is support rgba", "guessedname": "isSupportRGBA", "guessedtype": "function"}, "wrap": {"default": "'body'", "type": "String", "description": "a css selector for <code>Y.one()</code>,controls will insert into the wrap", "guessedname": "wrap", "guessedtype": "property"}, "keywords": {"type": "Object", "description": "color <a href=\"http://www.w3.org/TR/css3-color/#svg-color\">keywords</a> from <a href=\"http://www.w3.org/TR/SVG/types.html#ColorKeywords\">SVG 1.0 color keyword names</a>", "guessedname": "keywords", "guessedtype": "property"}, "onInit": {"default": "function(){}", "type": "Function", "description": "callback when widget init", "guessedname": "onInit", "guessedtype": "property"}, "isAll": {"default": "false", "type": "Boolean", "description": "if the param include rgba and rgb when run the callback <code>function({rgba:xxx,rgb:xxx}){}</code> or <code>function(rgba|rgb){}</code>", "guessedname": "isAll", "guessedtype": "property"}}, "description": "a color control for css3 property"}}, "version": "1.0.0", "namespaces": ["Y"]}